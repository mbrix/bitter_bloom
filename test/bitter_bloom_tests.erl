-module(bitter_bloom_tests).
-author('mbranton@emberfinancial.com').


-include_lib("../include/bitter_bloom.hrl").
-include_lib("eunit/include/eunit.hrl").

-compile(export_all).

start() -> ok.
stop(_) -> ok.



murmur() ->
	% format: expected, seed, data
    % see: https://github.com/bitcoin/bitcoin/blob/master/src/test/hash_tests.cpp
    D = [
      [16#00000000, 16#00000000, ""],
      [16#6a396f08, 16#FBA4C795, ""],
      [16#81f16f39, 16#ffffffff, ""],
      [16#514e28b7, 16#00000000, "00"],
      [16#ea3f0b17, 16#FBA4C795, "00"],
      [16#fd6cf10d, 16#00000000, "ff"],
      [16#16c6b7ab, 16#00000000, "0011"],
      [16#8eb51c3d, 16#00000000, "001122"],
      [16#b4471bf8, 16#00000000, "00112233"],
      [16#e2301fa8, 16#00000000, "0011223344"],
      [16#fc2e4a15, 16#00000000, "001122334455"],
      [16#b074502c, 16#00000000, "00112233445566"],
      [16#8034d2a0, 16#00000000, "0011223344556677"],
      [16#b4698def, 16#00000000, "001122334455667788"]
    ],
    lists:foreach(fun([Expected, Seed, Data]) ->
    					  ?assertEqual(Expected,
    					   erlang_murmurhash:murmurhash3_32(parse_hex(Data), Seed))
				  end, D).


murmur_test_() ->
  {foreach,
  fun start/0,
  fun stop/1,
   [
	{"Murmur tests", fun murmur/0}
   ]
  }.

filter_size() ->
      D = [
        [2, 0.001, 3, 8],
        [3, 0.01, 3, 5],
        [10, 0.2, 4, 2],
        [100, 0.2, 41, 2],
        [10000, 0.3, 3132, 1]
      ],
      lists:foreach(fun([NumElements, FalsePositiveRate, VLength, HashFuncs]) ->
							{ok, B} = bitter_bloom:new(NumElements, FalsePositiveRate),
							?assertEqual(byte_size(B#bbloom.vData), VLength),
							?assertEqual(B#bbloom.nHashFuncs, HashFuncs)
					end, D).


simple() ->
	%% test data from bitcoind
	%% see: https://github.com/bitcoin/bitcoin/blob/master/src/test/bloom_tests.cpp
	[A,B,C,D] = get_set(),
	{ok, F} = bitter_bloom:new(3, 0.01),
	{ok, F2} = bitter_bloom:insert(F, A),
	?assert(bitter_bloom:contains(F2, A)),
	?assertNot(bitter_bloom:contains(F2, B)),
	{ok, F3} = bitter_bloom:insert(F2, C),
	?assert(bitter_bloom:contains(F3, C)),
	{ok, F4} = bitter_bloom:insert(F3, D),
	?assert(bitter_bloom:contains(F4, D)),
	?assertEqual(#bbloom{vData = <<97,78,155>>,
						nHashFuncs = 5,
						nTweak = 0,
						nFlags = 0},
				F4).

ntweak() ->
	[A,B,C,D] = get_set(),
	{ok, F} = bitter_bloom:new(3, 0.01, 2147483649, 1),
	{ok, F2} = bitter_bloom:insert(F, A),
	?assert(bitter_bloom:contains(F2, A)),
	?assertNot(bitter_bloom:contains(F2, B)),
	{ok, F3} = bitter_bloom:insert(F2, C),
	?assert(bitter_bloom:contains(F3, C)),
	{ok, F4} = bitter_bloom:insert(F3, D),
	?assert(bitter_bloom:contains(F4, D)),
	?assertEqual(#bbloom{vData = <<206, 66, 153>>,
						nHashFuncs = 5,
						nTweak = 2147483649,
						nFlags = 1},
				F4).

public_keys() ->
	{ok, F}  = bitter_bloom:new(2, 0.001, 0, 1),
	{ok, F2} = bitter_bloom:insert(F, parse_hex("045b81f0017e2091e2edcd5eecf10d5bdd120a5514cb3ee65b8447ec18bfc4575c6d5bf415e54e03b1067934a0f0ba76b01c6b9ab227142ee1d543764b69d901e0")),
	{ok, F3} = bitter_bloom:insert(F2, parse_hex("477abbacd4113f2e6b100526222eedd953c26a64")),
	?assertEqual(#bbloom{vData = <<143, 193, 107>>,
						nHashFuncs = 8,
						nTweak = 0,
						nFlags = 1},
				F3).

max_vals() ->
	{ok, F} = bitter_bloom:new(900000000000000000000000000000000000, 0.01),
	?assertEqual(?MAX_BLOOM_FILTER_SIZE_BITS, byte_size(F#bbloom.vData)),
	{ok, F2} = bitter_bloom:new(10, 0.0000000000000001),
	?assertEqual(?MAX_HASH_FUNCS, F2#bbloom.nHashFuncs).

clear() ->
	[A,_,_,_] = get_set(),
	{ok, F} = bitter_bloom:new(1, 0.01),
	{ok, F2} = bitter_bloom:insert(F, A),
	?assert(bitter_bloom:contains(F2, A)),
	{ok, F3} = bitter_bloom:clear(F2),
	?assertNot(bitter_bloom:contains(F3, A)).

bloom_set() ->
	Vdata = <<5,246,253,39,250,253,103,24,97,106,70,146,72,152,94,241,176,110,96,67,88,76,214,194,73,209,132,104,227,156,228,138,200,154,150,197,110,77,194,109,29,95,39,186,240,91,171,26,154,32,34,42,159,25,44,225,225,64,100,139,171,39,73,10,2,228,97,52,247,101,36,91,194,176,1,169,7,8,47,155,57,233,29,20,83,105,195,44,187,134,224,43,217,6,36,54,53,85,126,171,83,225,148,75,187,83,173,11,144,254,97,160,26,10,96,206,51,171,109,21,175,190,125,232,77,6,118,53,82,119,4,245,10,255,237,191,229,235,41,5,17,247,114,176,33,50,189,204,242,95,133,176,230,62,185,122,80,64,88,86,249,57,128,124,4,156,171,77,11,125,237,201,209,58,187,131,16,40,18,178,161,87,192,18,119,41,115,70,70,239,15,23,189,168,32,147,171,7,36,131,119,216,43,105,90,239,149,55,128,104,103,67,33,130,28,160,153,171,108,189,33,32,144,67,145,81,5,15,120,116,140,47,15,74,235,106,117,44,129,242,195,11,79,48,14,112,98,188,32,92,30,226,192,1,165,248,182,17,35,117,49,28,0,153,15,145,65,109,70,230,180,198,117,25,71,242,19,189,93,116,122,130,222,39,215,38,203,169,90,38,132,237,216,180,131,93,118,51,144,238,203,131,160,38,61,134,180,49,146,206,246,122,66,196,69,98,187,182,185,8,97,4,75,106,243,104,234,53,1,164,141,12,165,170,225,94,226,123,104,83,247,163,201,167,71,144,50,190,96,208,19,101,48,63,101,66,29,212,247,245,97,212,35,133,201,22,138,119,129,148,16,21,155,232,75,4,64,244,172,160,50,28,200,216,205,130,214,168,236,85,230,152,79,134,151,150,18,153,7,230,117,247,240,32,115,216,181,129,146,167,66,0,4,218,119,105,223,233,1,184,216,121,84,48,160,15,210,88,134,200,112,125,23,162,67,75,49,208,160,150,105,252,13,52,106,197,167,128,82,94,23,142,227,148,73,69,89,119,227,101,110,82,131,23,74,4,9,32,246,128,189,178,76,55,175,66,118,238,177,167,43,110,5,181,25,9,5,247,187,65,208,229,109,7,234,34,12,45,20,90,252,101,47,94,222,5,195,8,104,82,66,254,72,234,69,170,172,71,91,36,5,169,9,149,82,84,2,16,239,214,64,223,75,139,12,87,153,28,214,140,10,9,10,94,157,194,28,194,70,14,223,174,148,49,247,246,68,112,158,35,55,1,10,4,162,127,33,196,236,82,48,241,146,67,37,56,201,120,10,13,185,10,65,0,115,240,39,138,109,177,121,251,5,99,168,194,69,167,121,95,155,115,84,60,35,128,93,12,1,79,145,202,118,0,52,109,150,33,149,187,86,137,11,40,107,101,230,252,210,0,208,60,186,195,65,63,90,49,50,86,4,170,220,244,79,31,20,248,163,83,215,40,148,130,102,224,53,99,146,234,6,103,218,199,112,232,81,163,125,86,3,201,26,170,209,29,40,47,16,200,52,31,67,111,149,238,45,56,14,62,92,138,171,121,69,79,249,149,218,124,146,136,39,172,149,156,150,95,42,82,11,173,31,154,43,139,63,188,10,119,19,13,66,183,150,209,203,156,112,202,122,36,160,115,164,77,219,217,109,225,109,243,174,192,219,66,83,195,253,66,70,131,88,217,52,67,181,66,74,57,176,98,200,186,76,97,144,47,40,37,182,254,138,106,159,109,45,232,137,162,254,157,92,246,60,193,83,6,40,187,172,2,165,194,96,194,104,7,23,224,49,205,147,128,159,175,99,151,112,194,57,103,176,22,147,200,54,82,136,43,144,191,24,122,29,255,16,92,200,124,253,164,67,180,145,229,4,209,253,6,78,174,73,99,92,173,103,191,34,169,101,236,67,26,231,145,108,151,133,173,103,78,68,104,211,153,168,165,236,184,154,158,56,4,99,117,60,72,1,196,136,132,237,227,137,143,26,122,40,71,49,75,85,112,236,207,152,101,95,84,17,16,184,108,158,194,183,207,28,145,253,56,219,121,57,136,178,20,85,184,28,45,201,31,157,205,86,150,161,112,86,76,123,225,44,164,25,41,57,5,174,77,95,35,243,211,192,246,89,74,146,76,216,69,26,254,183,156,80,217,113,24,206,40,46,153,184,66,160,160,129,168,8,120,248,17,22,176,34,40,48,22,89,123,169,26,103,82,2,17,26,241,252,154,4,10,215,154,206,233,156,175,0,7,234,19,13,85,223,5,96,43,213,148,102,17,84,41,153,37,241,83,212,253,25,144,137,82,98,196,21,188,141,12,80,26,1,5,152,253,226,99,49,200,123,203,79,52,11,138,93,180,164,212,36,55,14,135,214,170,95,6,113,136,192,55,36,94,134,240,12,17,173,200,13,48,148,111,159,241,214,5,157,79,200,201,93,197,17,131,81,63,197,120,36,95,28,231,204,92,160,119,170,78,88,7,12,42,10,112,107,175,87,24,11,249,9,57,75,118,176,140,202,175,176,30,16,71,20,108,195,107,37,47,210,114,101,121,22,33,172,146,135,214,198,7,192,125,77,75,0,55,2,172,75,238,129,70,168,164,120,38,15,82,127,150,66,91,37,192,201,124,0,20,178,28,193,56,188,187,124,185,164,212,22,250,14,50,52,251,78,124,112,55,226,3,34,201>>,
	HashFuncs = 6,
	Ntweak = 0,
	Nflags = 0,
	{ok, Bloom} = bitter_bloom:create(Vdata, HashFuncs, Ntweak, Nflags),
	?assertEqual(false, bitter_bloom:contains(Bloom, <<"randomtest">>)).

bloom_test_() -> 
  {foreach,
  fun start/0,
  fun stop/1,
   [
	{"Filter sizing", fun filter_size/0},
	{"Simple", fun simple/0},
	{"Ntweak serialization", fun ntweak/0},
	{"Public keys", fun public_keys/0},
	{"Clear filter", fun clear/0},
	{"Max vals", fun max_vals/0},
	{"bloom set", fun bloom_set/0}
   ]
  }.

%% Utilities

parse_hex(S) when is_binary(S) ->
	parse_hex(erlang:binary_to_list(S));

parse_hex(S) ->
  parse_hex(S, []).
parse_hex([], Acc) ->
  list_to_binary(lists:reverse(Acc));
parse_hex([X,Y|T], Acc) ->
  {ok, [V], []} = io_lib:fread("~16u", [X,Y]),
  parse_hex(T, [V | Acc]).

get_set() ->
  [parse_hex("99108ad8ed9bb6274d3980bab5a85c048f0950c8"),
   parse_hex("19108ad8ed9bb6274d3980bab5a85c048f0950c8"),
   parse_hex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"),
   parse_hex("b9300670b4c5366e95b2699e8b18bc75e5f729c5")].
